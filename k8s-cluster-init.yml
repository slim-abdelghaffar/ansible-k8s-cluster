---
- name: Prepare Kubernetes cluster nodes
  hosts: all
  become: yes
  
  tasks:
    # Install system dependencies
    - name: Install system dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-apt
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      ignore_errors: yes

    # Disable swap
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      ignore_errors: yes

    # Load required kernel modules
    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    # Configure modules to load at boot
    - name: Configure modules to load at boot
      copy:
        dest: /etc/modules-load.d/kubernetes.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    # Configure sysctl parameters
    - name: Configure sysctl parameters
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'

    # Apply sysctl parameters
    - name: Apply sysctl parameters
      command: sysctl --system
      register: sysctl_result
      changed_when: "'applying' in sysctl_result.stdout"

# Playbook for network and hostname configuration
- name: Configure hostnames and network
  hosts: all
  become: yes
  
  tasks:
    # Configure hostname
    - name: Set permanent hostname
      hostname:
        name: "{{ inventory_hostname }}"

    # Update /etc/hosts
    - name: Update /etc/hosts
      blockinfile:
        path: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED BLOCK KUBERNETES"
        block: |
          192.168.1.32 master-node
          192.168.1.14 worker-node
        create: yes

    # DNS configuration
    - name: Configure DNS timeout
      lineinfile:
        path: /etc/resolv.conf
        line: "options timeout:10 attempts:5"
        insertafter: EOF
        state: present
      ignore_errors: yes

# Playbook for containerd installation
- name: Configure containerd
  hosts: all
  become: yes
  
  tasks:
    # Create configuration directory
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    # Generate default configuration
    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    # Configure cgroup driver
    - name: Configure containerd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    # Restart containerd
    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes

# Playbook for existing Kubernetes cleanup
- name: Reset existing Kubernetes configurations
  hosts: all
  become: yes
  
  tasks:
    # Execute kubeadm reset
    - name: Run kubeadm reset
      command: kubeadm reset -f
      ignore_errors: yes

    # Clean Kubernetes directories
    - name: Clean kubernetes directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes/manifests
        - /var/lib/etcd
        - /etc/kubernetes/pki
        - /root/.kube
        - "{{ ansible_env.HOME }}/.kube"
      ignore_errors: yes

    # Clean CNI network interfaces
    - name: Clean CNI network interfaces
      shell: ip link delete cni0; ip link delete flannel.1
      ignore_errors: yes

    # Clean iptables
    - name: Clean iptables
      shell: iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
      ignore_errors: yes

# Playbook for master node initialization
- name: Initialize master node
  hosts: master
  become: yes
  
  tasks:
    # Configure kubelet
    - name: Configure kubelet
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"
        mode: '0644'

    # Verify containerd is running
    - name: Verify containerd is active
      service:
        name: containerd
        state: started
        enabled: yes

    # Verify port 6443 is available
    - name: Verify port 6443 is available
      wait_for:
        port: 6443
        state: stopped
        timeout: 10
      ignore_errors: yes

    # Create kubeadm config file
    - name: Create kubeadm config file
      copy:
        dest: /tmp/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            name: {{ inventory_hostname }}
          localAPIEndpoint:
            advertiseAddress: {{ ansible_default_ipv4.address }}
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          controlPlaneEndpoint: "master-node:6443"
          networking:
            podSubnet: "10.244.0.0/16"
            serviceSubnet: "10.96.0.0/12"
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
        mode: '0644'

    # Initialize the cluster
    - name: Initialize Kubernetes cluster
      shell: >-
        kubeadm init --config=/tmp/kubeadm-config.yaml 
                     --upload-certs 
                     --ignore-preflight-errors=all 
                     --v=5
      register: kubeadm_init_output
      retries: 3
      delay: 30
      until: kubeadm_init_output is succeeded
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin:/bin"
      args:
        creates: /etc/kubernetes/admin.conf
      timeout: 600

# Playbook for kubectl access configuration without sudo
- name: Configure kubectl access without sudo
  hosts: master
  become: yes
  
  vars:
    normal_user: "{{ ansible_user_id }}"
    
  tasks:
    # Verify admin.conf exists
    - name: Verify if admin.conf exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_stat
      
    # Get current username
    - name: Get current username
      command: id -u -n
      register: current_user
      changed_when: false
      become: no
      
    # Ensure PKI certificates have correct permissions
    - name: Ensure PKI certificates have correct permissions
      file:
        path: "/etc/kubernetes/pki"
        state: directory
        mode: "0755"
        recurse: yes
      when: admin_conf_stat.stat.exists
      
    # Make certificates readable
    - name: Ensure certificates are readable
      shell: chmod -R a+r /etc/kubernetes/pki
      when: admin_conf_stat.stat.exists
      
    # Configuration for normal user
    - name: Create .kube directory for normal user
      file:
        path: "/home/{{ normal_user }}/.kube"
        state: directory
        owner: "{{ normal_user }}"
        group: "{{ normal_user }}"
        mode: "0700"
      when: admin_conf_stat.stat.exists

    # IMPORTANT FIX: Copy admin.conf with correct permissions
    - name: Copy admin.conf for normal user
      shell: |
        cp -f /etc/kubernetes/admin.conf /home/{{ normal_user }}/.kube/config
        chown {{ normal_user }}:{{ normal_user }} /home/{{ normal_user }}/.kube/config
        chmod 600 /home/{{ normal_user }}/.kube/config
      when: admin_conf_stat.stat.exists
      
    # Configure kubectl for non-root user
    - name: Configure user to use kubectl without sudo
      blockinfile:
        path: "/home/{{ normal_user }}/.bashrc"
        block: |
          # Kubernetes configuration
          export KUBECONFIG=/home/{{ normal_user }}/.kube/config
        marker: "# {mark} ANSIBLE MANAGED BLOCK KUBERNETES"
        create: yes
      when: admin_conf_stat.stat.exists
      
    # Add user to required groups
    - name: Add user to kubernetes groups
      user:
        name: "{{ normal_user }}"
        groups: "{{ item }}"
        append: yes
      loop:
        - sudo
        - adm
      ignore_errors: yes
        
    # Ensure /etc/kubernetes is accessible
    - name: Ensure /etc/kubernetes is accessible
      file:
        path: /etc/kubernetes
        state: directory
        mode: "0755"
      when: admin_conf_stat.stat.exists
      
    # Ensure admin.conf is accessible
    - name: Ensure admin.conf is accessible
      file:
        path: /etc/kubernetes/admin.conf
        mode: "0644"
      when: admin_conf_stat.stat.exists
      
    # Configuration for root (still useful)
    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: "0700"
      when: admin_conf_stat.stat.exists

    - name: Copy admin.conf to root directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: "0600"
      when: admin_conf_stat.stat.exists

    # Create symbolic link to certificates in user's home
    - name: Create symbolic link to certificates in user's home
      file:
        src: /etc/kubernetes/pki
        dest: "/home/{{ normal_user }}/.kube/pki"
        state: link
        owner: "{{ normal_user }}"
        group: "{{ normal_user }}"
      when: admin_conf_stat.stat.exists
      
    # Install Helm with confirmed working manual method
    - name: Add Helm GPG key
      shell: |
        curl -fsSL https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      args:
        creates: /usr/share/keyrings/helm.gpg

    - name: Install apt-transport-https
      apt:
        name: apt-transport-https
        state: present

    - name: Configure Helm repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Helm
      apt:
        name: helm
        state: present

    # Verify cluster access
    - name: Wait for Kubernetes API to be available
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 6443
        timeout: 300
      when: admin_conf_stat.stat.exists

    # IMPORTANT FIX - Modify kubeconfig to skip TLS verification
    - name: Modify kubeconfig to skip TLS verification
      lineinfile:
        path: "/home/{{ normal_user }}/.kube/config"
        regexp: '    insecure-skip-tls-verify: true'
        insertafter: '    certificate-authority-data:'
        line: '    insecure-skip-tls-verify: true'
      when: admin_conf_stat.stat.exists
      
    # Configure kubectl to skip certificate verification
    - name: Configure kubectl to skip TLS verification
      shell: |
        kubectl config set-cluster kubernetes --insecure-skip-tls-verify=true
      become: yes
      become_user: "{{ normal_user }}"
      environment:
        KUBECONFIG: "/home/{{ normal_user }}/.kube/config"
      when: admin_conf_stat.stat.exists
      ignore_errors: yes

    # Verify cluster access without sudo
    - name: Verify cluster access without sudo
      shell: kubectl get nodes
      become: yes
      become_user: "{{ normal_user }}"
      environment:
        KUBECONFIG: "/home/{{ normal_user }}/.kube/config"
      register: kube_check_normal
      until: kube_check_normal.rc == 0
      retries: 5
      delay: 10
      when: admin_conf_stat.stat.exists
      ignore_errors: yes

    # Install Flannel
    - name: Install Flannel network
      shell: >-
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      become: yes
      become_user: "{{ normal_user }}"
      environment:
        KUBECONFIG: "/home/{{ normal_user }}/.kube/config"
      register: flannel_result
      retries: 5
      delay: 15
      until: flannel_result.rc == 0
      when: admin_conf_stat.stat.exists
      ignore_errors: yes

    # Generate join command
    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: admin_conf_stat.stat.exists
    
    - name: Store join command
      set_fact:
        join_command_line: "{{ join_command.stdout }}"
      when: join_command is defined and join_command.stdout is defined

# Playbook for worker nodes to join
- name: Join worker nodes
  hosts: workers
  become: yes
  
  tasks:
    - name: Wait before joining cluster
      pause:
        seconds: 30

    - name: Join the cluster
      shell: "{{ hostvars['master-node']['join_command_line'] }}"
      register: join_result
      retries: 5
      delay: 15
      until: join_result.rc == 0
      ignore_errors: yes
      when: hostvars['master-node']['join_command_line'] is defined

# Final playbook to verify cluster status
- name: Verify cluster status
  hosts: master
  become: yes
  vars:
    normal_user: "{{ ansible_user_id }}"
  
  tasks:
    # Ensure user can run kubectl without sudo
    - name: Show cluster status (as normal user)
      shell: kubectl get nodes
      become: yes
      become_user: "{{ normal_user }}"
      environment:
        KUBECONFIG: "/home/{{ normal_user }}/.kube/config"
      register: nodes_status
      ignore_errors: yes
      
    - name: Display kubectl result without sudo
      debug:
        var: nodes_status.stdout_lines
      when: nodes_status.stdout is defined
      
    - name: Show system pods status (as normal user)
      shell: kubectl get pods -A
      become: yes
      become_user: "{{ normal_user }}"
      environment:
        KUBECONFIG: "/home/{{ normal_user }}/.kube/config"
      register: pods_status
      ignore_errors: yes
      
    - name: Display pods result without sudo
      debug:
        var: pods_status.stdout_lines
      when: pods_status.stdout is defined
      
    # Final instructions
    - name: Instructions for using kubectl without sudo
      debug:
        msg: |
          To use kubectl without sudo, make sure to reload your profile by running:
          source ~/.bashrc
          
          Or log out and log back into your session.
